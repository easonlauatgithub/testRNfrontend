/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MessageViewModel,
    MessageViewModelFromJSON,
    MessageViewModelToJSON,
    PostRecord,
    PostRecordFromJSON,
    PostRecordToJSON,
    ShopsViewModel,
    ShopsViewModelFromJSON,
    ShopsViewModelToJSON,
} from '../models';

export interface SpaForgotPasswordBaseRequest {
    domainRootId?: number;
    surname?: string | null;
    givenName?: string | null;
    gender?: string | null;
    email?: string | null;
    phoneDistrictNum?: string | null;
    phoneNumber?: string | null;
    password?: string | null;
}

export interface SpaGetArticleByIdRequest {
    id: string | null;
}

export interface SpaGetArticlesRequest {
    scode: string | null;
    page: number | null;
    keyword: string | null;
    cat?: Array<number> | null;
    tag?: Array<number> | null;
}

export interface SpaGetPagedInfosRequest {
    srcShopCode: string | null;
    scode: string | null;
    catSubType: number;
    page: number | null;
    pageSize: number | null;
    keyword: string | null;
    getLinks: boolean | null;
    cat?: Array<number> | null;
    tag?: Array<number> | null;
    prid?: Array<string> | null;
}

export interface SpaGetPostByIdRequest {
    id: string | null;
}

export interface SpaGetShopInfoRequest {
    scode: string | null;
}

export interface SpaGetShopItemsRequest {
    scode: string | null;
    page: number | null;
    keyword: string | null;
    cat?: Array<number> | null;
    tag?: Array<number> | null;
}

export interface SpaPoliciesRequest {
    scode: string | null;
}

/**
 * 
 */
export class SpaApi extends runtime.BaseAPI {

    /**
     */
    async spaForgotPasswordBaseRaw(requestParameters: SpaForgotPasswordBaseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MessageViewModel>> {
        const queryParameters: any = {};

        if (requestParameters.domainRootId !== undefined) {
            queryParameters['domainRootId'] = requestParameters.domainRootId;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.gender !== undefined) {
            queryParameters['gender'] = requestParameters.gender;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.phoneDistrictNum !== undefined) {
            queryParameters['phoneDistrictNum'] = requestParameters.phoneDistrictNum;
        }

        if (requestParameters.phoneNumber !== undefined) {
            queryParameters['phoneNumber'] = requestParameters.phoneNumber;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Spa/ForgotPasswordBase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageViewModelFromJSON(jsonValue));
    }

    /**
     */
    async spaForgotPasswordBase(requestParameters: SpaForgotPasswordBaseRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MessageViewModel> {
        const response = await this.spaForgotPasswordBaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async spaGetArticleByIdRaw(requestParameters: SpaGetArticleByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PostRecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling spaGetArticleById.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Spa/GetArticleById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostRecordFromJSON(jsonValue));
    }

    /**
     */
    async spaGetArticleById(requestParameters: SpaGetArticleByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PostRecord> {
        const response = await this.spaGetArticleByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async spaGetArticlesRaw(requestParameters: SpaGetArticlesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ShopsViewModel>> {
        if (requestParameters.scode === null || requestParameters.scode === undefined) {
            throw new runtime.RequiredError('scode','Required parameter requestParameters.scode was null or undefined when calling spaGetArticles.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling spaGetArticles.');
        }

        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling spaGetArticles.');
        }

        const queryParameters: any = {};

        if (requestParameters.scode !== undefined) {
            queryParameters['scode'] = requestParameters.scode;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.cat) {
            queryParameters['cat'] = requestParameters.cat;
        }

        if (requestParameters.tag) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Spa/GetArticles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShopsViewModelFromJSON(jsonValue));
    }

    /**
     */
    async spaGetArticles(requestParameters: SpaGetArticlesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ShopsViewModel> {
        const response = await this.spaGetArticlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async spaGetPagedInfosRaw(requestParameters: SpaGetPagedInfosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ShopsViewModel>> {
        if (requestParameters.srcShopCode === null || requestParameters.srcShopCode === undefined) {
            throw new runtime.RequiredError('srcShopCode','Required parameter requestParameters.srcShopCode was null or undefined when calling spaGetPagedInfos.');
        }

        if (requestParameters.scode === null || requestParameters.scode === undefined) {
            throw new runtime.RequiredError('scode','Required parameter requestParameters.scode was null or undefined when calling spaGetPagedInfos.');
        }

        if (requestParameters.catSubType === null || requestParameters.catSubType === undefined) {
            throw new runtime.RequiredError('catSubType','Required parameter requestParameters.catSubType was null or undefined when calling spaGetPagedInfos.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling spaGetPagedInfos.');
        }

        if (requestParameters.pageSize === null || requestParameters.pageSize === undefined) {
            throw new runtime.RequiredError('pageSize','Required parameter requestParameters.pageSize was null or undefined when calling spaGetPagedInfos.');
        }

        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling spaGetPagedInfos.');
        }

        if (requestParameters.getLinks === null || requestParameters.getLinks === undefined) {
            throw new runtime.RequiredError('getLinks','Required parameter requestParameters.getLinks was null or undefined when calling spaGetPagedInfos.');
        }

        const queryParameters: any = {};

        if (requestParameters.srcShopCode !== undefined) {
            queryParameters['srcShopCode'] = requestParameters.srcShopCode;
        }

        if (requestParameters.scode !== undefined) {
            queryParameters['scode'] = requestParameters.scode;
        }

        if (requestParameters.catSubType !== undefined) {
            queryParameters['catSubType'] = requestParameters.catSubType;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.cat) {
            queryParameters['cat'] = requestParameters.cat;
        }

        if (requestParameters.tag) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        if (requestParameters.getLinks !== undefined) {
            queryParameters['getLinks'] = requestParameters.getLinks;
        }

        if (requestParameters.prid) {
            queryParameters['prid'] = requestParameters.prid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Spa/GetPagedInfos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShopsViewModelFromJSON(jsonValue));
    }

    /**
     */
    async spaGetPagedInfos(requestParameters: SpaGetPagedInfosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ShopsViewModel> {
        const response = await this.spaGetPagedInfosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async spaGetPostByIdRaw(requestParameters: SpaGetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PostRecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling spaGetPostById.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Spa/GetPostById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostRecordFromJSON(jsonValue));
    }

    /**
     */
    async spaGetPostById(requestParameters: SpaGetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PostRecord> {
        const response = await this.spaGetPostByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async spaGetShopInfoRaw(requestParameters: SpaGetShopInfoRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ShopsViewModel>> {
        if (requestParameters.scode === null || requestParameters.scode === undefined) {
            throw new runtime.RequiredError('scode','Required parameter requestParameters.scode was null or undefined when calling spaGetShopInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.scode !== undefined) {
            queryParameters['scode'] = requestParameters.scode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Spa/GetShopInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShopsViewModelFromJSON(jsonValue));
    }

    /**
     */
    async spaGetShopInfo(requestParameters: SpaGetShopInfoRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ShopsViewModel> {
        const response = await this.spaGetShopInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async spaGetShopItemsRaw(requestParameters: SpaGetShopItemsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ShopsViewModel>> {
        if (requestParameters.scode === null || requestParameters.scode === undefined) {
            throw new runtime.RequiredError('scode','Required parameter requestParameters.scode was null or undefined when calling spaGetShopItems.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling spaGetShopItems.');
        }

        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling spaGetShopItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.scode !== undefined) {
            queryParameters['scode'] = requestParameters.scode;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.cat) {
            queryParameters['cat'] = requestParameters.cat;
        }

        if (requestParameters.tag) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Spa/GetShopItems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShopsViewModelFromJSON(jsonValue));
    }

    /**
     */
    async spaGetShopItems(requestParameters: SpaGetShopItemsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ShopsViewModel> {
        const response = await this.spaGetShopItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async spaPoliciesRaw(requestParameters: SpaPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<PostRecord>>> {
        if (requestParameters.scode === null || requestParameters.scode === undefined) {
            throw new runtime.RequiredError('scode','Required parameter requestParameters.scode was null or undefined when calling spaPolicies.');
        }

        const queryParameters: any = {};

        if (requestParameters.scode !== undefined) {
            queryParameters['scode'] = requestParameters.scode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Spa/Policies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostRecordFromJSON));
    }

    /**
     */
    async spaPolicies(requestParameters: SpaPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<PostRecord>> {
        const response = await this.spaPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
