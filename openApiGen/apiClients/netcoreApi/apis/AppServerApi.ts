/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DeviceReg,
    DeviceRegFromJSON,
    DeviceRegToJSON,
    LoginInfo,
    LoginInfoFromJSON,
    LoginInfoToJSON,
    MessageViewModel,
    MessageViewModelFromJSON,
    MessageViewModelToJSON,
    MobileViewModel,
    MobileViewModelFromJSON,
    MobileViewModelToJSON,
    Register,
    RegisterFromJSON,
    RegisterToJSON,
    RetOfUserInfo,
    RetOfUserInfoFromJSON,
    RetOfUserInfoToJSON,
} from '../models';
import { AppApiClient } from '../../../../apis/netcoreApiClient';

export interface AppServerForgotPasswordBaseRequest {
    domainRootId?: number;
    surname?: string | null;
    givenName?: string | null;
    gender?: string | null;
    email?: string | null;
    phoneDistrictNum?: string | null;
    phoneNumber?: string | null;
    password?: string | null;
}

export interface AppServerLoginRequest {
    info: LoginInfo;
}

export interface AppServerRegisterRequest {
    register: Register;
}

export interface AppServerUpdateDeviceInfoRequest {
    reg: DeviceReg;
}

/**
 * 
 */
export class AppServerApi extends runtime.BaseAPI {

    /**
     */
    async appServerForgotPasswordBaseRaw(requestParameters: AppServerForgotPasswordBaseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MessageViewModel>> {
        const queryParameters: any = {};

        if (requestParameters.domainRootId !== undefined) {
            queryParameters['domainRootId'] = requestParameters.domainRootId;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.gender !== undefined) {
            queryParameters['gender'] = requestParameters.gender;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.phoneDistrictNum !== undefined) {
            queryParameters['phoneDistrictNum'] = requestParameters.phoneDistrictNum;
        }

        if (requestParameters.phoneNumber !== undefined) {
            queryParameters['phoneNumber'] = requestParameters.phoneNumber;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/AppServer/ForgotPasswordBase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageViewModelFromJSON(jsonValue));
    }

    /**
     */
    async appServerForgotPasswordBase(requestParameters: AppServerForgotPasswordBaseRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MessageViewModel> {
        const response = await this.appServerForgotPasswordBaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appServerIndex(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MobileViewModel> {
        const response = await this.appServerIndexRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async appServerIndexRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MobileViewModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/AppServer/Index`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MobileViewModelFromJSON(jsonValue));
    }

    /**
     */
    async appServerLoginRaw(requestParameters: AppServerLoginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfUserInfo>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling appServerLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/AppServer/Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginInfoToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfUserInfoFromJSON(jsonValue));
    }

    /**
     */
    async appServerLogin(requestParameters: AppServerLoginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfUserInfo> {
        const response = await this.appServerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appServerLogoutRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/AppServer/Logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async appServerLogout(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.appServerLogoutRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async appServerRegisterRaw(requestParameters: AppServerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfUserInfo>> {
        if (requestParameters.register === null || requestParameters.register === undefined) {
            throw new runtime.RequiredError('register','Required parameter requestParameters.register was null or undefined when calling appServerRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/AppServer/Register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterToJSON(requestParameters.register),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfUserInfoFromJSON(jsonValue));
    }

    /**
     */
    async appServerRegister(requestParameters: AppServerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfUserInfo> {
        const response = await this.appServerRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appServerUpdateDeviceInfoRaw(requestParameters: AppServerUpdateDeviceInfoRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.reg === null || requestParameters.reg === undefined) {
            throw new runtime.RequiredError('reg','Required parameter requestParameters.reg was null or undefined when calling appServerUpdateDeviceInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/AppServer/UpdateDeviceInfo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceRegToJSON(requestParameters.reg),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async appServerUpdateDeviceInfo(requestParameters: AppServerUpdateDeviceInfoRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.appServerUpdateDeviceInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
