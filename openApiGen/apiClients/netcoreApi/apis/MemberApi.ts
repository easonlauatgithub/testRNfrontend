/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CatConfigLabel,
    CatConfigLabelFromJSON,
    CatConfigLabelToJSON,
    CatGroup,
    CatGroupFromJSON,
    CatGroupToJSON,
    CatGroupedLabels,
    CatGroupedLabelsFromJSON,
    CatGroupedLabelsToJSON,
    CatLabelGroup,
    CatLabelGroupFromJSON,
    CatLabelGroupToJSON,
    Category,
    CategoryFromJSON,
    CategoryToJSON,
    CategoryPair,
    CategoryPairFromJSON,
    CategoryPairToJSON,
    Contact,
    ContactFromJSON,
    ContactToJSON,
    FileRecord,
    FileRecordFromJSON,
    FileRecordToJSON,
    FilterResultOfPostRecord,
    FilterResultOfPostRecordFromJSON,
    FilterResultOfPostRecordToJSON,
    FilterResultOfQa,
    FilterResultOfQaFromJSON,
    FilterResultOfQaToJSON,
    MessageViewModel,
    MessageViewModelFromJSON,
    MessageViewModelToJSON,
    OrderCatLabel,
    OrderCatLabelFromJSON,
    OrderCatLabelToJSON,
    OrderInfo,
    OrderInfoFromJSON,
    OrderInfoToJSON,
    Payment,
    PaymentFromJSON,
    PaymentToJSON,
    PostBase,
    PostBaseFromJSON,
    PostBaseToJSON,
    PostLink,
    PostLinkFromJSON,
    PostLinkToJSON,
    PostProp,
    PostPropFromJSON,
    PostPropToJSON,
    PostRecord,
    PostRecordFromJSON,
    PostRecordToJSON,
    PriceInfo,
    PriceInfoFromJSON,
    PriceInfoToJSON,
    PsCatId,
    PsCatIdFromJSON,
    PsCatIdToJSON,
    PsCatLabel,
    PsCatLabelFromJSON,
    PsCatLabelToJSON,
    Qa,
    QaFromJSON,
    QaToJSON,
    RetOfCatConfigLabel,
    RetOfCatConfigLabelFromJSON,
    RetOfCatConfigLabelToJSON,
    RetOfCategory,
    RetOfCategoryFromJSON,
    RetOfCategoryToJSON,
    RetOfContact,
    RetOfContactFromJSON,
    RetOfContactToJSON,
    RetOfDashProfile,
    RetOfDashProfileFromJSON,
    RetOfDashProfileToJSON,
    RetOfFilterResultOfFileRecord,
    RetOfFilterResultOfFileRecordFromJSON,
    RetOfFilterResultOfFileRecordToJSON,
    RetOfFilterResultOfShopInfo,
    RetOfFilterResultOfShopInfoFromJSON,
    RetOfFilterResultOfShopInfoToJSON,
    RetOfFrontendCatLabel,
    RetOfFrontendCatLabelFromJSON,
    RetOfFrontendCatLabelToJSON,
    RetOfInt64,
    RetOfInt64FromJSON,
    RetOfInt64ToJSON,
    RetOfListOfFileRecord,
    RetOfListOfFileRecordFromJSON,
    RetOfListOfFileRecordToJSON,
    RetOfListOfPostProp,
    RetOfListOfPostPropFromJSON,
    RetOfListOfPostPropToJSON,
    RetOfListOfPriceInfo,
    RetOfListOfPriceInfoFromJSON,
    RetOfListOfPriceInfoToJSON,
    RetOfObject,
    RetOfObjectFromJSON,
    RetOfObjectToJSON,
    RetOfOrderCatLabel,
    RetOfOrderCatLabelFromJSON,
    RetOfOrderCatLabelToJSON,
    RetOfOrderInfo,
    RetOfOrderInfoFromJSON,
    RetOfOrderInfoToJSON,
    RetOfPostLink,
    RetOfPostLinkFromJSON,
    RetOfPostLinkToJSON,
    RetOfPostRecord,
    RetOfPostRecordFromJSON,
    RetOfPostRecordToJSON,
    RetOfRoleInfo,
    RetOfRoleInfoFromJSON,
    RetOfRoleInfoToJSON,
    RetOfShopCatLabel,
    RetOfShopCatLabelFromJSON,
    RetOfShopCatLabelToJSON,
    RetOfShopInfo,
    RetOfShopInfoFromJSON,
    RetOfShopInfoToJSON,
    RetOfUserRoleInfo,
    RetOfUserRoleInfoFromJSON,
    RetOfUserRoleInfoToJSON,
    RoleInfo,
    RoleInfoFromJSON,
    RoleInfoToJSON,
    ShopBase,
    ShopBaseFromJSON,
    ShopBaseToJSON,
    ShopCatLabel,
    ShopCatLabelFromJSON,
    ShopCatLabelToJSON,
    ShopCatTag,
    ShopCatTagFromJSON,
    ShopCatTagToJSON,
    UserInfo,
    UserInfoFromJSON,
    UserInfoToJSON,
    UserRoleInfo,
    UserRoleInfoFromJSON,
    UserRoleInfoToJSON,
} from '../models';

export interface MemberAcceptQuotationRequest {
    info: OrderInfo;
}

export interface MemberAddCatConfigLabelRequest {
    label: CatConfigLabel;
}

export interface MemberAddCategoryRequest {
    newcat: Category;
}

export interface MemberAddFileToPostRequest {
    file: FileRecord;
}

export interface MemberAddMultiFilesRequest {
    uid: string | null;
}

export interface MemberAddOrderExtraRequest {
    label: OrderCatLabel;
}

export interface MemberAddPostRequest {
    newrecord: PostRecord;
}

export interface MemberAddPostCatRequest {
    pcat: PsCatId;
}

export interface MemberAddPostCatLabelRequest {
    labels: PsCatLabel;
}

export interface MemberAddPostLinkRequest {
    link: PostLink;
}

export interface MemberAddPostPropsRequest {
    postId: string | null;
    props: Array<PostProp>;
}

export interface MemberAddPriceInfosRequest {
    postId: string | null;
    prices: Array<PriceInfo>;
}

export interface MemberAddQARequest {
    qa: Qa;
}

export interface MemberAddRoleRequest {
    info: RoleInfo;
}

export interface MemberAddRoleToUserRequest {
    info: UserRoleInfo;
}

export interface MemberAddShopCatLabelRequest {
    label: ShopCatLabel;
}

export interface MemberAddShopCatTagRequest {
    tag: ShopCatTag;
}

export interface MemberCreateShopRequest {
    info: UserInfo;
}

export interface MemberForgotPasswordBaseRequest {
    domainRootId?: number;
    surname?: string | null;
    givenName?: string | null;
    gender?: string | null;
    email?: string | null;
    phoneDistrictNum?: string | null;
    phoneNumber?: string | null;
    password?: string | null;
}

export interface MemberGetCatConfigLabelsRequest {
    catType: number;
}

export interface MemberGetCategoriesRequest {
    typeCode: number;
    uid: string | null;
}

export interface MemberGetOrderExtrasRequest {
    orderId: number;
}

export interface MemberGetOwnerFileRequest {
    filename: string | null;
}

export interface MemberGetPostByIdRequest {
    id: string | null;
}

export interface MemberGetPostCatLabelsRequest {
    postId: string | null;
}

export interface MemberGetPostCatsRequest {
    postId: string | null;
}

export interface MemberGetPostLinksRequest {
    postId: string | null;
}

export interface MemberGetPostPropsRequest {
    postId: string | null;
}

export interface MemberGetPriceInfosRequest {
    priceIds: Array<number>;
}

export interface MemberGetPriceInfosAllRequest {
    postId: string | null;
}

export interface MemberGetQARequest {
    page: number | null;
    path: string | null;
    query: string | null;
    toUserId: string | null;
}

export interface MemberGetShopByUidRequest {
    uid: string | null;
}

export interface MemberGetShopCatLabelsRequest {
    uid: string | null;
}

export interface MemberGetShopCatLabelsGroupedRequest {
    uid: string | null;
}

export interface MemberGetShopCatTagRequest {
    shopId: number;
}

export interface MemberGetShopInfoLabelByCatIdRequest {
    catId: number;
}

export interface MemberGetShopItemsRequest {
    page: number | null;
    uid: string | null;
    keyword: string | null;
    cat?: Array<number> | null;
    tag?: Array<number> | null;
    prid?: Array<string> | null;
}

export interface MemberGetShopListRequest {
    page: number | null;
    cat?: Array<number> | null;
    tag?: Array<number> | null;
    sid?: Array<number> | null;
}

export interface MemberGetShopViewModelByUidRequest {
    uid: string | null;
}

export interface MemberGetUserFilesRequest {
    page: number | null;
    uid: string | null;
}

export interface MemberGetUserPostsRequest {
    page: number | null;
    cat?: Array<number> | null;
    tag?: Array<number> | null;
    state?: Array<number> | null;
}

export interface MemberRemoveCatConfigLabelRequest {
    label: CatConfigLabel;
}

export interface MemberRemoveFileFromPostRequest {
    file: FileRecord;
}

export interface MemberRemoveOrderExtraRequest {
    label: OrderCatLabel;
}

export interface MemberRemovePostCatRequest {
    psCatId: PsCatId;
}

export interface MemberRemovePostCatLabelRequest {
    catLabel: PsCatLabel;
}

export interface MemberRemovePostLinkRequest {
    link: PostLink;
}

export interface MemberRemoveRoleFromUserRequest {
    info: UserRoleInfo;
}

export interface MemberRemoveShopCatLabelRequest {
    label: ShopCatLabel;
}

export interface MemberRemoveShopCatTagRequest {
    tag: ShopCatTag;
}

export interface MemberSetOrderActiveRequest {
    info: OrderInfo;
}

export interface MemberSetOrderOfferReadyRequest {
    info: OrderInfo;
}

export interface MemberSetOrderPaidRequest {
    info: OrderInfo;
}

export interface MemberSetPaymentPaidRequest {
    info: Payment;
}

export interface MemberSetPriceInfosRequest {
    postId: string | null;
    prices: Array<PriceInfo>;
}

export interface MemberUpdateCategoryRequest {
    cat: Category;
}

export interface MemberUpdateContactTypeRequest {
    contact: Contact;
}

export interface MemberUpdateOrderBaseRequest {
    info: OrderInfo;
}

export interface MemberUpdateOrderShopMsgRequest {
    info: OrderInfo;
}

export interface MemberUpdatePostBaseRequest {
    postbase: PostBase;
}

export interface MemberUpdatePostFileRequest {
    file: FileRecord;
}

export interface MemberUpdatePostLinkRequest {
    link: PostLink;
}

export interface MemberUpdatePostLinkImgRequest {
    link: PostLink;
}

export interface MemberUpdateRoleRequest {
    info: RoleInfo;
}

export interface MemberUpdateShopRequest {
    shop: ShopBase;
}

export interface MemberUpdateShopCatRequest {
    shop: ShopBase;
}

export interface MemberUpdateShopCatLabelRequest {
    label: ShopCatLabel;
}

export interface MemberUpdateShopLogoRequest {
    shop: ShopBase;
}

/**
 * 
 */
export class MemberApi extends runtime.BaseAPI {

    /**
     */
    async memberAcceptQuotationRaw(requestParameters: MemberAcceptQuotationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfOrderInfo>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling memberAcceptQuotation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AcceptQuotation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderInfoToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfOrderInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberAcceptQuotation(requestParameters: MemberAcceptQuotationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfOrderInfo> {
        const response = await this.memberAcceptQuotationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddCatConfigLabelRaw(requestParameters: MemberAddCatConfigLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfCatConfigLabel>> {
        if (requestParameters.label === null || requestParameters.label === undefined) {
            throw new runtime.RequiredError('label','Required parameter requestParameters.label was null or undefined when calling memberAddCatConfigLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddCatConfigLabel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatConfigLabelToJSON(requestParameters.label),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfCatConfigLabelFromJSON(jsonValue));
    }

    /**
     */
    async memberAddCatConfigLabel(requestParameters: MemberAddCatConfigLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfCatConfigLabel> {
        const response = await this.memberAddCatConfigLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddCategoryRaw(requestParameters: MemberAddCategoryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfCategory>> {
        if (requestParameters.newcat === null || requestParameters.newcat === undefined) {
            throw new runtime.RequiredError('newcat','Required parameter requestParameters.newcat was null or undefined when calling memberAddCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddCategory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryToJSON(requestParameters.newcat),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfCategoryFromJSON(jsonValue));
    }

    /**
     */
    async memberAddCategory(requestParameters: MemberAddCategoryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfCategory> {
        const response = await this.memberAddCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddFileToPostRaw(requestParameters: MemberAddFileToPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfInt64>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling memberAddFileToPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddFileToPost`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileRecordToJSON(requestParameters.file),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfInt64FromJSON(jsonValue));
    }

    /**
     */
    async memberAddFileToPost(requestParameters: MemberAddFileToPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfInt64> {
        const response = await this.memberAddFileToPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddMultiFilesRaw(requestParameters: MemberAddMultiFilesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfListOfFileRecord>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling memberAddMultiFiles.');
        }

        const queryParameters: any = {};

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/AddMultiFiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfListOfFileRecordFromJSON(jsonValue));
    }

    /**
     */
    async memberAddMultiFiles(requestParameters: MemberAddMultiFilesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfListOfFileRecord> {
        const response = await this.memberAddMultiFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddOrderExtraRaw(requestParameters: MemberAddOrderExtraRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfOrderCatLabel>> {
        if (requestParameters.label === null || requestParameters.label === undefined) {
            throw new runtime.RequiredError('label','Required parameter requestParameters.label was null or undefined when calling memberAddOrderExtra.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddOrderExtra`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCatLabelToJSON(requestParameters.label),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfOrderCatLabelFromJSON(jsonValue));
    }

    /**
     */
    async memberAddOrderExtra(requestParameters: MemberAddOrderExtraRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfOrderCatLabel> {
        const response = await this.memberAddOrderExtraRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddPostRaw(requestParameters: MemberAddPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfPostRecord>> {
        if (requestParameters.newrecord === null || requestParameters.newrecord === undefined) {
            throw new runtime.RequiredError('newrecord','Required parameter requestParameters.newrecord was null or undefined when calling memberAddPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddPost`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRecordToJSON(requestParameters.newrecord),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfPostRecordFromJSON(jsonValue));
    }

    /**
     */
    async memberAddPost(requestParameters: MemberAddPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfPostRecord> {
        const response = await this.memberAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddPostCatRaw(requestParameters: MemberAddPostCatRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PsCatId>> {
        if (requestParameters.pcat === null || requestParameters.pcat === undefined) {
            throw new runtime.RequiredError('pcat','Required parameter requestParameters.pcat was null or undefined when calling memberAddPostCat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddPostCat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PsCatIdToJSON(requestParameters.pcat),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PsCatIdFromJSON(jsonValue));
    }

    /**
     */
    async memberAddPostCat(requestParameters: MemberAddPostCatRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PsCatId> {
        const response = await this.memberAddPostCatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddPostCatLabelRaw(requestParameters: MemberAddPostCatLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PsCatLabel>> {
        if (requestParameters.labels === null || requestParameters.labels === undefined) {
            throw new runtime.RequiredError('labels','Required parameter requestParameters.labels was null or undefined when calling memberAddPostCatLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddPostCatLabel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PsCatLabelToJSON(requestParameters.labels),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PsCatLabelFromJSON(jsonValue));
    }

    /**
     */
    async memberAddPostCatLabel(requestParameters: MemberAddPostCatLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PsCatLabel> {
        const response = await this.memberAddPostCatLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddPostLinkRaw(requestParameters: MemberAddPostLinkRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfPostLink>> {
        if (requestParameters.link === null || requestParameters.link === undefined) {
            throw new runtime.RequiredError('link','Required parameter requestParameters.link was null or undefined when calling memberAddPostLink.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddPostLink`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostLinkToJSON(requestParameters.link),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfPostLinkFromJSON(jsonValue));
    }

    /**
     */
    async memberAddPostLink(requestParameters: MemberAddPostLinkRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfPostLink> {
        const response = await this.memberAddPostLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddPostPropsRaw(requestParameters: MemberAddPostPropsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfListOfPostProp>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling memberAddPostProps.');
        }

        if (requestParameters.props === null || requestParameters.props === undefined) {
            throw new runtime.RequiredError('props','Required parameter requestParameters.props was null or undefined when calling memberAddPostProps.');
        }

        const queryParameters: any = {};

        if (requestParameters.postId !== undefined) {
            queryParameters['postId'] = requestParameters.postId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddPostProps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.props.map(PostPropToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfListOfPostPropFromJSON(jsonValue));
    }

    /**
     */
    async memberAddPostProps(requestParameters: MemberAddPostPropsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfListOfPostProp> {
        const response = await this.memberAddPostPropsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddPriceInfosRaw(requestParameters: MemberAddPriceInfosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfListOfPriceInfo>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling memberAddPriceInfos.');
        }

        if (requestParameters.prices === null || requestParameters.prices === undefined) {
            throw new runtime.RequiredError('prices','Required parameter requestParameters.prices was null or undefined when calling memberAddPriceInfos.');
        }

        const queryParameters: any = {};

        if (requestParameters.postId !== undefined) {
            queryParameters['postId'] = requestParameters.postId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddPriceInfos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.prices.map(PriceInfoToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfListOfPriceInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberAddPriceInfos(requestParameters: MemberAddPriceInfosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfListOfPriceInfo> {
        const response = await this.memberAddPriceInfosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddQARaw(requestParameters: MemberAddQARequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Qa>> {
        if (requestParameters.qa === null || requestParameters.qa === undefined) {
            throw new runtime.RequiredError('qa','Required parameter requestParameters.qa was null or undefined when calling memberAddQA.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddQA`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QaToJSON(requestParameters.qa),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QaFromJSON(jsonValue));
    }

    /**
     */
    async memberAddQA(requestParameters: MemberAddQARequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Qa> {
        const response = await this.memberAddQARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddRoleRaw(requestParameters: MemberAddRoleRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfRoleInfo>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling memberAddRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddRole`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleInfoToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfRoleInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberAddRole(requestParameters: MemberAddRoleRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfRoleInfo> {
        const response = await this.memberAddRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddRoleToUserRaw(requestParameters: MemberAddRoleToUserRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfUserRoleInfo>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling memberAddRoleToUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddRoleToUser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRoleInfoToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfUserRoleInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberAddRoleToUser(requestParameters: MemberAddRoleToUserRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfUserRoleInfo> {
        const response = await this.memberAddRoleToUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddShopCatLabelRaw(requestParameters: MemberAddShopCatLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfShopCatLabel>> {
        if (requestParameters.label === null || requestParameters.label === undefined) {
            throw new runtime.RequiredError('label','Required parameter requestParameters.label was null or undefined when calling memberAddShopCatLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddShopCatLabel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShopCatLabelToJSON(requestParameters.label),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfShopCatLabelFromJSON(jsonValue));
    }

    /**
     */
    async memberAddShopCatLabel(requestParameters: MemberAddShopCatLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfShopCatLabel> {
        const response = await this.memberAddShopCatLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberAddShopCatTagRaw(requestParameters: MemberAddShopCatTagRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ShopCatTag>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling memberAddShopCatTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/AddShopCatTag`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShopCatTagToJSON(requestParameters.tag),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShopCatTagFromJSON(jsonValue));
    }

    /**
     */
    async memberAddShopCatTag(requestParameters: MemberAddShopCatTagRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ShopCatTag> {
        const response = await this.memberAddShopCatTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberCreateShopRaw(requestParameters: MemberCreateShopRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfShopInfo>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling memberCreateShop.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/CreateShop`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserInfoToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfShopInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberCreateShop(requestParameters: MemberCreateShopRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfShopInfo> {
        const response = await this.memberCreateShopRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberForgotPasswordBaseRaw(requestParameters: MemberForgotPasswordBaseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MessageViewModel>> {
        const queryParameters: any = {};

        if (requestParameters.domainRootId !== undefined) {
            queryParameters['domainRootId'] = requestParameters.domainRootId;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.gender !== undefined) {
            queryParameters['gender'] = requestParameters.gender;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.phoneDistrictNum !== undefined) {
            queryParameters['phoneDistrictNum'] = requestParameters.phoneDistrictNum;
        }

        if (requestParameters.phoneNumber !== undefined) {
            queryParameters['phoneNumber'] = requestParameters.phoneNumber;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/ForgotPasswordBase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageViewModelFromJSON(jsonValue));
    }

    /**
     */
    async memberForgotPasswordBase(requestParameters: MemberForgotPasswordBaseRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MessageViewModel> {
        const response = await this.memberForgotPasswordBaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetAllRolesRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<RoleInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetAllRoles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleInfoFromJSON));
    }

    /**
     */
    async memberGetAllRoles(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<RoleInfo>> {
        const response = await this.memberGetAllRolesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetCatConfigLabelsRaw(requestParameters: MemberGetCatConfigLabelsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<CatLabelGroup>>> {
        if (requestParameters.catType === null || requestParameters.catType === undefined) {
            throw new runtime.RequiredError('catType','Required parameter requestParameters.catType was null or undefined when calling memberGetCatConfigLabels.');
        }

        const queryParameters: any = {};

        if (requestParameters.catType !== undefined) {
            queryParameters['catType'] = requestParameters.catType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetCatConfigLabels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatLabelGroupFromJSON));
    }

    /**
     */
    async memberGetCatConfigLabels(requestParameters: MemberGetCatConfigLabelsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<CatLabelGroup>> {
        const response = await this.memberGetCatConfigLabelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetCategoriesRaw(requestParameters: MemberGetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<CatGroup>>> {
        if (requestParameters.typeCode === null || requestParameters.typeCode === undefined) {
            throw new runtime.RequiredError('typeCode','Required parameter requestParameters.typeCode was null or undefined when calling memberGetCategories.');
        }

        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling memberGetCategories.');
        }

        const queryParameters: any = {};

        if (requestParameters.typeCode !== undefined) {
            queryParameters['typeCode'] = requestParameters.typeCode;
        }

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatGroupFromJSON));
    }

    /**
     */
    async memberGetCategories(requestParameters: MemberGetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<CatGroup>> {
        const response = await this.memberGetCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetDashProfileRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfDashProfile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetDashProfile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfDashProfileFromJSON(jsonValue));
    }

    /**
     */
    async memberGetDashProfile(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfDashProfile> {
        const response = await this.memberGetDashProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetOrderExtrasRaw(requestParameters: MemberGetOrderExtrasRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<CatLabelGroup>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling memberGetOrderExtras.');
        }

        const queryParameters: any = {};

        if (requestParameters.orderId !== undefined) {
            queryParameters['orderId'] = requestParameters.orderId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetOrderExtras`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatLabelGroupFromJSON));
    }

    /**
     */
    async memberGetOrderExtras(requestParameters: MemberGetOrderExtrasRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<CatLabelGroup>> {
        const response = await this.memberGetOrderExtrasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetOwnerFileRaw(requestParameters: MemberGetOwnerFileRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.filename === null || requestParameters.filename === undefined) {
            throw new runtime.RequiredError('filename','Required parameter requestParameters.filename was null or undefined when calling memberGetOwnerFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.filename !== undefined) {
            queryParameters['filename'] = requestParameters.filename;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetOwnerFile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async memberGetOwnerFile(requestParameters: MemberGetOwnerFileRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Blob> {
        const response = await this.memberGetOwnerFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetPostByIdRaw(requestParameters: MemberGetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PostRecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling memberGetPostById.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetPostById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostRecordFromJSON(jsonValue));
    }

    /**
     */
    async memberGetPostById(requestParameters: MemberGetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PostRecord> {
        const response = await this.memberGetPostByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetPostCatLabelsRaw(requestParameters: MemberGetPostCatLabelsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<CatLabelGroup>>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling memberGetPostCatLabels.');
        }

        const queryParameters: any = {};

        if (requestParameters.postId !== undefined) {
            queryParameters['postId'] = requestParameters.postId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetPostCatLabels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatLabelGroupFromJSON));
    }

    /**
     */
    async memberGetPostCatLabels(requestParameters: MemberGetPostCatLabelsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<CatLabelGroup>> {
        const response = await this.memberGetPostCatLabelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetPostCatsRaw(requestParameters: MemberGetPostCatsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<CategoryPair>>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling memberGetPostCats.');
        }

        const queryParameters: any = {};

        if (requestParameters.postId !== undefined) {
            queryParameters['postId'] = requestParameters.postId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetPostCats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryPairFromJSON));
    }

    /**
     */
    async memberGetPostCats(requestParameters: MemberGetPostCatsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<CategoryPair>> {
        const response = await this.memberGetPostCatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetPostLinksRaw(requestParameters: MemberGetPostLinksRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<PostLink>>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling memberGetPostLinks.');
        }

        const queryParameters: any = {};

        if (requestParameters.postId !== undefined) {
            queryParameters['postId'] = requestParameters.postId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetPostLinks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostLinkFromJSON));
    }

    /**
     */
    async memberGetPostLinks(requestParameters: MemberGetPostLinksRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<PostLink>> {
        const response = await this.memberGetPostLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetPostPropsRaw(requestParameters: MemberGetPostPropsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<PostProp>>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling memberGetPostProps.');
        }

        const queryParameters: any = {};

        if (requestParameters.postId !== undefined) {
            queryParameters['postId'] = requestParameters.postId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetPostProps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostPropFromJSON));
    }

    /**
     */
    async memberGetPostProps(requestParameters: MemberGetPostPropsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<PostProp>> {
        const response = await this.memberGetPostPropsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetPriceInfosRaw(requestParameters: MemberGetPriceInfosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<PriceInfo>>> {
        if (requestParameters.priceIds === null || requestParameters.priceIds === undefined) {
            throw new runtime.RequiredError('priceIds','Required parameter requestParameters.priceIds was null or undefined when calling memberGetPriceInfos.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/GetPriceInfos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.priceIds,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PriceInfoFromJSON));
    }

    /**
     */
    async memberGetPriceInfos(requestParameters: MemberGetPriceInfosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<PriceInfo>> {
        const response = await this.memberGetPriceInfosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetPriceInfosAllRaw(requestParameters: MemberGetPriceInfosAllRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<PriceInfo>>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling memberGetPriceInfosAll.');
        }

        const queryParameters: any = {};

        if (requestParameters.postId !== undefined) {
            queryParameters['postId'] = requestParameters.postId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetPriceInfos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PriceInfoFromJSON));
    }

    /**
     */
    async memberGetPriceInfosAll(requestParameters: MemberGetPriceInfosAllRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<PriceInfo>> {
        const response = await this.memberGetPriceInfosAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetQARaw(requestParameters: MemberGetQARequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FilterResultOfQa>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling memberGetQA.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling memberGetQA.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling memberGetQA.');
        }

        if (requestParameters.toUserId === null || requestParameters.toUserId === undefined) {
            throw new runtime.RequiredError('toUserId','Required parameter requestParameters.toUserId was null or undefined when calling memberGetQA.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.toUserId !== undefined) {
            queryParameters['toUserId'] = requestParameters.toUserId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetQA`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilterResultOfQaFromJSON(jsonValue));
    }

    /**
     */
    async memberGetQA(requestParameters: MemberGetQARequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FilterResultOfQa> {
        const response = await this.memberGetQARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetShopByUidRaw(requestParameters: MemberGetShopByUidRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfShopInfo>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling memberGetShopByUid.');
        }

        const queryParameters: any = {};

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetShopByUid`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfShopInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberGetShopByUid(requestParameters: MemberGetShopByUidRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfShopInfo> {
        const response = await this.memberGetShopByUidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetShopCatLabelsRaw(requestParameters: MemberGetShopCatLabelsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<CatLabelGroup>>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling memberGetShopCatLabels.');
        }

        const queryParameters: any = {};

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetShopCatLabels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatLabelGroupFromJSON));
    }

    /**
     */
    async memberGetShopCatLabels(requestParameters: MemberGetShopCatLabelsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<CatLabelGroup>> {
        const response = await this.memberGetShopCatLabelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetShopCatLabelsGroupedRaw(requestParameters: MemberGetShopCatLabelsGroupedRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<CatGroupedLabels>>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling memberGetShopCatLabelsGrouped.');
        }

        const queryParameters: any = {};

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetShopCatLabelsGrouped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatGroupedLabelsFromJSON));
    }

    /**
     */
    async memberGetShopCatLabelsGrouped(requestParameters: MemberGetShopCatLabelsGroupedRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<CatGroupedLabels>> {
        const response = await this.memberGetShopCatLabelsGroupedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetShopCatTagRaw(requestParameters: MemberGetShopCatTagRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<CategoryPair>>> {
        if (requestParameters.shopId === null || requestParameters.shopId === undefined) {
            throw new runtime.RequiredError('shopId','Required parameter requestParameters.shopId was null or undefined when calling memberGetShopCatTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.shopId !== undefined) {
            queryParameters['shopId'] = requestParameters.shopId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetShopCatTag`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryPairFromJSON));
    }

    /**
     */
    async memberGetShopCatTag(requestParameters: MemberGetShopCatTagRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<CategoryPair>> {
        const response = await this.memberGetShopCatTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetShopInfoLabelByCatIdRaw(requestParameters: MemberGetShopInfoLabelByCatIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CatLabelGroup>> {
        if (requestParameters.catId === null || requestParameters.catId === undefined) {
            throw new runtime.RequiredError('catId','Required parameter requestParameters.catId was null or undefined when calling memberGetShopInfoLabelByCatId.');
        }

        const queryParameters: any = {};

        if (requestParameters.catId !== undefined) {
            queryParameters['catId'] = requestParameters.catId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetShopInfoLabelByCatId`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatLabelGroupFromJSON(jsonValue));
    }

    /**
     */
    async memberGetShopInfoLabelByCatId(requestParameters: MemberGetShopInfoLabelByCatIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CatLabelGroup> {
        const response = await this.memberGetShopInfoLabelByCatIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetShopInfoLabelsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<{ [key: string]: CatLabelGroup; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetShopInfoLabels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, CatLabelGroupFromJSON));
    }

    /**
     */
    async memberGetShopInfoLabels(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<{ [key: string]: CatLabelGroup; }> {
        const response = await this.memberGetShopInfoLabelsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetShopItemsRaw(requestParameters: MemberGetShopItemsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FilterResultOfPostRecord>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling memberGetShopItems.');
        }

        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling memberGetShopItems.');
        }

        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling memberGetShopItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.cat) {
            queryParameters['cat'] = requestParameters.cat;
        }

        if (requestParameters.tag) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        if (requestParameters.prid) {
            queryParameters['prid'] = requestParameters.prid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetShopItems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilterResultOfPostRecordFromJSON(jsonValue));
    }

    /**
     */
    async memberGetShopItems(requestParameters: MemberGetShopItemsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FilterResultOfPostRecord> {
        const response = await this.memberGetShopItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetShopListRaw(requestParameters: MemberGetShopListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfFilterResultOfShopInfo>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling memberGetShopList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.cat) {
            queryParameters['cat'] = requestParameters.cat;
        }

        if (requestParameters.tag) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.sid) {
            queryParameters['sid'] = requestParameters.sid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetShopList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfFilterResultOfShopInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberGetShopList(requestParameters: MemberGetShopListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfFilterResultOfShopInfo> {
        const response = await this.memberGetShopListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetShopViewModelByUidRaw(requestParameters: MemberGetShopViewModelByUidRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfObject>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling memberGetShopViewModelByUid.');
        }

        const queryParameters: any = {};

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetShopViewModelByUid`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfObjectFromJSON(jsonValue));
    }

    /**
     */
    async memberGetShopViewModelByUid(requestParameters: MemberGetShopViewModelByUidRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfObject> {
        const response = await this.memberGetShopViewModelByUidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetUserFilesRaw(requestParameters: MemberGetUserFilesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfFilterResultOfFileRecord>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling memberGetUserFiles.');
        }

        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling memberGetUserFiles.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetUserFiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfFilterResultOfFileRecordFromJSON(jsonValue));
    }

    /**
     */
    async memberGetUserFiles(requestParameters: MemberGetUserFilesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfFilterResultOfFileRecord> {
        const response = await this.memberGetUserFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberGetUserPostsRaw(requestParameters: MemberGetUserPostsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<PostRecord>>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling memberGetUserPosts.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.cat) {
            queryParameters['cat'] = requestParameters.cat;
        }

        if (requestParameters.tag) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.state) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Member/GetUserPosts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostRecordFromJSON));
    }

    /**
     */
    async memberGetUserPosts(requestParameters: MemberGetUserPostsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<PostRecord>> {
        const response = await this.memberGetUserPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberRemoveCatConfigLabelRaw(requestParameters: MemberRemoveCatConfigLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.label === null || requestParameters.label === undefined) {
            throw new runtime.RequiredError('label','Required parameter requestParameters.label was null or undefined when calling memberRemoveCatConfigLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/RemoveCatConfigLabel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatConfigLabelToJSON(requestParameters.label),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async memberRemoveCatConfigLabel(requestParameters: MemberRemoveCatConfigLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.memberRemoveCatConfigLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberRemoveFileFromPostRaw(requestParameters: MemberRemoveFileFromPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfListOfFileRecord>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling memberRemoveFileFromPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/RemoveFileFromPost`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileRecordToJSON(requestParameters.file),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfListOfFileRecordFromJSON(jsonValue));
    }

    /**
     */
    async memberRemoveFileFromPost(requestParameters: MemberRemoveFileFromPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfListOfFileRecord> {
        const response = await this.memberRemoveFileFromPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberRemoveOrderExtraRaw(requestParameters: MemberRemoveOrderExtraRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.label === null || requestParameters.label === undefined) {
            throw new runtime.RequiredError('label','Required parameter requestParameters.label was null or undefined when calling memberRemoveOrderExtra.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/RemoveOrderExtra`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCatLabelToJSON(requestParameters.label),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async memberRemoveOrderExtra(requestParameters: MemberRemoveOrderExtraRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.memberRemoveOrderExtraRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberRemovePostCatRaw(requestParameters: MemberRemovePostCatRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.psCatId === null || requestParameters.psCatId === undefined) {
            throw new runtime.RequiredError('psCatId','Required parameter requestParameters.psCatId was null or undefined when calling memberRemovePostCat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/RemovePostCat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PsCatIdToJSON(requestParameters.psCatId),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async memberRemovePostCat(requestParameters: MemberRemovePostCatRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.memberRemovePostCatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberRemovePostCatLabelRaw(requestParameters: MemberRemovePostCatLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.catLabel === null || requestParameters.catLabel === undefined) {
            throw new runtime.RequiredError('catLabel','Required parameter requestParameters.catLabel was null or undefined when calling memberRemovePostCatLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/RemovePostCatLabel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PsCatLabelToJSON(requestParameters.catLabel),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async memberRemovePostCatLabel(requestParameters: MemberRemovePostCatLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.memberRemovePostCatLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberRemovePostLinkRaw(requestParameters: MemberRemovePostLinkRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfPostLink>> {
        if (requestParameters.link === null || requestParameters.link === undefined) {
            throw new runtime.RequiredError('link','Required parameter requestParameters.link was null or undefined when calling memberRemovePostLink.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/RemovePostLink`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostLinkToJSON(requestParameters.link),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfPostLinkFromJSON(jsonValue));
    }

    /**
     */
    async memberRemovePostLink(requestParameters: MemberRemovePostLinkRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfPostLink> {
        const response = await this.memberRemovePostLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberRemoveRoleFromUserRaw(requestParameters: MemberRemoveRoleFromUserRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling memberRemoveRoleFromUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/RemoveRoleFromUser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRoleInfoToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async memberRemoveRoleFromUser(requestParameters: MemberRemoveRoleFromUserRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.memberRemoveRoleFromUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberRemoveShopCatLabelRaw(requestParameters: MemberRemoveShopCatLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.label === null || requestParameters.label === undefined) {
            throw new runtime.RequiredError('label','Required parameter requestParameters.label was null or undefined when calling memberRemoveShopCatLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/RemoveShopCatLabel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShopCatLabelToJSON(requestParameters.label),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async memberRemoveShopCatLabel(requestParameters: MemberRemoveShopCatLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.memberRemoveShopCatLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberRemoveShopCatTagRaw(requestParameters: MemberRemoveShopCatTagRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling memberRemoveShopCatTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/RemoveShopCatTag`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShopCatTagToJSON(requestParameters.tag),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async memberRemoveShopCatTag(requestParameters: MemberRemoveShopCatTagRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.memberRemoveShopCatTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberSetOrderActiveRaw(requestParameters: MemberSetOrderActiveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfOrderInfo>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling memberSetOrderActive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/SetOrderActive`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderInfoToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfOrderInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberSetOrderActive(requestParameters: MemberSetOrderActiveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfOrderInfo> {
        const response = await this.memberSetOrderActiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberSetOrderOfferReadyRaw(requestParameters: MemberSetOrderOfferReadyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfOrderInfo>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling memberSetOrderOfferReady.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/SetOrderOfferReady`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderInfoToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfOrderInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberSetOrderOfferReady(requestParameters: MemberSetOrderOfferReadyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfOrderInfo> {
        const response = await this.memberSetOrderOfferReadyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberSetOrderPaidRaw(requestParameters: MemberSetOrderPaidRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfOrderInfo>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling memberSetOrderPaid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/SetOrderPaid`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderInfoToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfOrderInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberSetOrderPaid(requestParameters: MemberSetOrderPaidRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfOrderInfo> {
        const response = await this.memberSetOrderPaidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberSetPaymentPaidRaw(requestParameters: MemberSetPaymentPaidRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling memberSetPaymentPaid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/SetPaymentPaid`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async memberSetPaymentPaid(requestParameters: MemberSetPaymentPaidRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.memberSetPaymentPaidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberSetPriceInfosRaw(requestParameters: MemberSetPriceInfosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfListOfPriceInfo>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling memberSetPriceInfos.');
        }

        if (requestParameters.prices === null || requestParameters.prices === undefined) {
            throw new runtime.RequiredError('prices','Required parameter requestParameters.prices was null or undefined when calling memberSetPriceInfos.');
        }

        const queryParameters: any = {};

        if (requestParameters.postId !== undefined) {
            queryParameters['postId'] = requestParameters.postId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/SetPriceInfos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.prices.map(PriceInfoToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfListOfPriceInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberSetPriceInfos(requestParameters: MemberSetPriceInfosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfListOfPriceInfo> {
        const response = await this.memberSetPriceInfosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberUpdateCategoryRaw(requestParameters: MemberUpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfCategory>> {
        if (requestParameters.cat === null || requestParameters.cat === undefined) {
            throw new runtime.RequiredError('cat','Required parameter requestParameters.cat was null or undefined when calling memberUpdateCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/UpdateCategory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryToJSON(requestParameters.cat),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfCategoryFromJSON(jsonValue));
    }

    /**
     */
    async memberUpdateCategory(requestParameters: MemberUpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfCategory> {
        const response = await this.memberUpdateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberUpdateContactTypeRaw(requestParameters: MemberUpdateContactTypeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfContact>> {
        if (requestParameters.contact === null || requestParameters.contact === undefined) {
            throw new runtime.RequiredError('contact','Required parameter requestParameters.contact was null or undefined when calling memberUpdateContactType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/UpdateContactType`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactToJSON(requestParameters.contact),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfContactFromJSON(jsonValue));
    }

    /**
     */
    async memberUpdateContactType(requestParameters: MemberUpdateContactTypeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfContact> {
        const response = await this.memberUpdateContactTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberUpdateOrderBaseRaw(requestParameters: MemberUpdateOrderBaseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfOrderInfo>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling memberUpdateOrderBase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/UpdateOrderBase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderInfoToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfOrderInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberUpdateOrderBase(requestParameters: MemberUpdateOrderBaseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfOrderInfo> {
        const response = await this.memberUpdateOrderBaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberUpdateOrderShopMsgRaw(requestParameters: MemberUpdateOrderShopMsgRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfOrderInfo>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling memberUpdateOrderShopMsg.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/UpdateOrderShopMsg`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderInfoToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfOrderInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberUpdateOrderShopMsg(requestParameters: MemberUpdateOrderShopMsgRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfOrderInfo> {
        const response = await this.memberUpdateOrderShopMsgRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberUpdatePostBaseRaw(requestParameters: MemberUpdatePostBaseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfPostRecord>> {
        if (requestParameters.postbase === null || requestParameters.postbase === undefined) {
            throw new runtime.RequiredError('postbase','Required parameter requestParameters.postbase was null or undefined when calling memberUpdatePostBase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/UpdatePostBase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBaseToJSON(requestParameters.postbase),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfPostRecordFromJSON(jsonValue));
    }

    /**
     */
    async memberUpdatePostBase(requestParameters: MemberUpdatePostBaseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfPostRecord> {
        const response = await this.memberUpdatePostBaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberUpdatePostFileRaw(requestParameters: MemberUpdatePostFileRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfListOfFileRecord>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling memberUpdatePostFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/UpdatePostFile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileRecordToJSON(requestParameters.file),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfListOfFileRecordFromJSON(jsonValue));
    }

    /**
     */
    async memberUpdatePostFile(requestParameters: MemberUpdatePostFileRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfListOfFileRecord> {
        const response = await this.memberUpdatePostFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberUpdatePostLinkRaw(requestParameters: MemberUpdatePostLinkRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfPostLink>> {
        if (requestParameters.link === null || requestParameters.link === undefined) {
            throw new runtime.RequiredError('link','Required parameter requestParameters.link was null or undefined when calling memberUpdatePostLink.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/UpdatePostLink`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostLinkToJSON(requestParameters.link),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfPostLinkFromJSON(jsonValue));
    }

    /**
     */
    async memberUpdatePostLink(requestParameters: MemberUpdatePostLinkRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfPostLink> {
        const response = await this.memberUpdatePostLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberUpdatePostLinkImgRaw(requestParameters: MemberUpdatePostLinkImgRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfPostLink>> {
        if (requestParameters.link === null || requestParameters.link === undefined) {
            throw new runtime.RequiredError('link','Required parameter requestParameters.link was null or undefined when calling memberUpdatePostLinkImg.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/UpdatePostLinkImg`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostLinkToJSON(requestParameters.link),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfPostLinkFromJSON(jsonValue));
    }

    /**
     */
    async memberUpdatePostLinkImg(requestParameters: MemberUpdatePostLinkImgRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfPostLink> {
        const response = await this.memberUpdatePostLinkImgRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberUpdateRoleRaw(requestParameters: MemberUpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling memberUpdateRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/UpdateRole`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleInfoToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async memberUpdateRole(requestParameters: MemberUpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.memberUpdateRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberUpdateShopRaw(requestParameters: MemberUpdateShopRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfShopInfo>> {
        if (requestParameters.shop === null || requestParameters.shop === undefined) {
            throw new runtime.RequiredError('shop','Required parameter requestParameters.shop was null or undefined when calling memberUpdateShop.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/UpdateShop`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShopBaseToJSON(requestParameters.shop),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfShopInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberUpdateShop(requestParameters: MemberUpdateShopRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfShopInfo> {
        const response = await this.memberUpdateShopRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberUpdateShopCatRaw(requestParameters: MemberUpdateShopCatRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfShopInfo>> {
        if (requestParameters.shop === null || requestParameters.shop === undefined) {
            throw new runtime.RequiredError('shop','Required parameter requestParameters.shop was null or undefined when calling memberUpdateShopCat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/UpdateShopCat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShopBaseToJSON(requestParameters.shop),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfShopInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberUpdateShopCat(requestParameters: MemberUpdateShopCatRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfShopInfo> {
        const response = await this.memberUpdateShopCatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberUpdateShopCatLabelRaw(requestParameters: MemberUpdateShopCatLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfFrontendCatLabel>> {
        if (requestParameters.label === null || requestParameters.label === undefined) {
            throw new runtime.RequiredError('label','Required parameter requestParameters.label was null or undefined when calling memberUpdateShopCatLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/UpdateShopCatLabel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShopCatLabelToJSON(requestParameters.label),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfFrontendCatLabelFromJSON(jsonValue));
    }

    /**
     */
    async memberUpdateShopCatLabel(requestParameters: MemberUpdateShopCatLabelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfFrontendCatLabel> {
        const response = await this.memberUpdateShopCatLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberUpdateShopLogoRaw(requestParameters: MemberUpdateShopLogoRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfShopInfo>> {
        if (requestParameters.shop === null || requestParameters.shop === undefined) {
            throw new runtime.RequiredError('shop','Required parameter requestParameters.shop was null or undefined when calling memberUpdateShopLogo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Member/UpdateShopLogo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShopBaseToJSON(requestParameters.shop),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfShopInfoFromJSON(jsonValue));
    }

    /**
     */
    async memberUpdateShopLogo(requestParameters: MemberUpdateShopLogoRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfShopInfo> {
        const response = await this.memberUpdateShopLogoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
