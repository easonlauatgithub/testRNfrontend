/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CartRecord,
    CartRecordFromJSON,
    CartRecordToJSON,
    CatGroup,
    CatGroupFromJSON,
    CatGroupToJSON,
    Contact,
    ContactFromJSON,
    ContactToJSON,
    FilterResultOfCartItemDetailGroup,
    FilterResultOfCartItemDetailGroupFromJSON,
    FilterResultOfCartItemDetailGroupToJSON,
    FilterResultOfContact,
    FilterResultOfContactFromJSON,
    FilterResultOfContactToJSON,
    FilterResultOfOrderDetail,
    FilterResultOfOrderDetailFromJSON,
    FilterResultOfOrderDetailToJSON,
    FilterResultOfQa,
    FilterResultOfQaFromJSON,
    FilterResultOfQaToJSON,
    LoginInfo,
    LoginInfoFromJSON,
    LoginInfoToJSON,
    MasterOrder,
    MasterOrderFromJSON,
    MasterOrderToJSON,
    MessageViewModel,
    MessageViewModelFromJSON,
    MessageViewModelToJSON,
    OrderDetail,
    OrderDetailFromJSON,
    OrderDetailToJSON,
    OrderDetailViewModel,
    OrderDetailViewModelFromJSON,
    OrderDetailViewModelToJSON,
    PriceInfo,
    PriceInfoFromJSON,
    PriceInfoToJSON,
    Qa,
    QaFromJSON,
    QaToJSON,
    Register,
    RegisterFromJSON,
    RegisterToJSON,
    RetOfCartRecord,
    RetOfCartRecordFromJSON,
    RetOfCartRecordToJSON,
    RetOfContact,
    RetOfContactFromJSON,
    RetOfContactToJSON,
    RetOfOrderInfo,
    RetOfOrderInfoFromJSON,
    RetOfOrderInfoToJSON,
    RetOfUserInfo,
    RetOfUserInfoFromJSON,
    RetOfUserInfoToJSON,
} from '../models';

export interface CustomerAddContactRequest {
    contact: Contact;
}

export interface CustomerAddOrdersRequest {
    info: MasterOrder;
}

export interface CustomerAddQARequest {
    qa: Qa;
}

export interface CustomerAddToCartRequest {
    item: CartRecord;
}

export interface CustomerForgotLoginRequest {
    info: Register;
}

export interface CustomerForgotPasswordBaseRequest {
    domainRootId?: number;
    surname?: string | null;
    givenName?: string | null;
    gender?: string | null;
    email?: string | null;
    phoneDistrictNum?: string | null;
    phoneNumber?: string | null;
    password?: string | null;
}

export interface CustomerGetCartItemsRequest {
    suid: string | null;
}

export interface CustomerGetCategoriesRequest {
    typeCode: number;
    uid: string | null;
}

export interface CustomerGetContactsPagedRequest {
    page: number | null;
    catId?: Array<number> | null;
}

export interface CustomerGetLocalCartItemsRequest {
    cartItems: Array<CartRecord>;
}

export interface CustomerGetOrderDetailRequest {
    id: number;
}

export interface CustomerGetOrderListRequest {
    page: number | null;
}

export interface CustomerGetOrdersRequest {
    id: number;
}

export interface CustomerGetPickupContactByIdRequest {
    id: number;
}

export interface CustomerGetPickupLlocationsRequest {
    catId: number;
}

export interface CustomerGetPostCatLabelsRequest {
    postId: string | null;
}

export interface CustomerGetPostCatsRequest {
    postId: string | null;
}

export interface CustomerGetPricesRequest {
    id: string | null;
}

export interface CustomerGetQARequest {
    page: number | null;
    path: string | null;
    query: string | null;
}

export interface CustomerLoginRequest {
    loginInfo: LoginInfo;
}

export interface CustomerRegisterRequest {
    register: Register;
}

export interface CustomerRemoveContactRequest {
    contactId: number;
}

export interface CustomerRemoveFromCartRequest {
    ids: Array<number>;
}

export interface CustomerUpdateCartItemRequest {
    item: CartRecord;
}

/**
 * 
 */
export class CustomerApi extends runtime.BaseAPI {

    /**
     */
    async customerAddContactRaw(requestParameters: CustomerAddContactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfContact>> {
        if (requestParameters.contact === null || requestParameters.contact === undefined) {
            throw new runtime.RequiredError('contact','Required parameter requestParameters.contact was null or undefined when calling customerAddContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Customer/AddContact`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactToJSON(requestParameters.contact),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfContactFromJSON(jsonValue));
    }

    /**
     */
    async customerAddContact(requestParameters: CustomerAddContactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfContact> {
        const response = await this.customerAddContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerAddOrdersRaw(requestParameters: CustomerAddOrdersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<RetOfOrderInfo>>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling customerAddOrders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Customer/AddOrders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MasterOrderToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RetOfOrderInfoFromJSON));
    }

    /**
     */
    async customerAddOrders(requestParameters: CustomerAddOrdersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<RetOfOrderInfo>> {
        const response = await this.customerAddOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerAddQARaw(requestParameters: CustomerAddQARequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Qa>> {
        if (requestParameters.qa === null || requestParameters.qa === undefined) {
            throw new runtime.RequiredError('qa','Required parameter requestParameters.qa was null or undefined when calling customerAddQA.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Customer/AddQA`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QaToJSON(requestParameters.qa),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QaFromJSON(jsonValue));
    }

    /**
     */
    async customerAddQA(requestParameters: CustomerAddQARequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Qa> {
        const response = await this.customerAddQARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerAddToCartRaw(requestParameters: CustomerAddToCartRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfCartRecord>> {
        if (requestParameters.item === null || requestParameters.item === undefined) {
            throw new runtime.RequiredError('item','Required parameter requestParameters.item was null or undefined when calling customerAddToCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Customer/AddToCart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartRecordToJSON(requestParameters.item),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfCartRecordFromJSON(jsonValue));
    }

    /**
     */
    async customerAddToCart(requestParameters: CustomerAddToCartRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfCartRecord> {
        const response = await this.customerAddToCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerForgotLoginRaw(requestParameters: CustomerForgotLoginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MessageViewModel>> {
        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling customerForgotLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Customer/ForgotLogin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterToJSON(requestParameters.info),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageViewModelFromJSON(jsonValue));
    }

    /**
     */
    async customerForgotLogin(requestParameters: CustomerForgotLoginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MessageViewModel> {
        const response = await this.customerForgotLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerForgotPasswordBaseRaw(requestParameters: CustomerForgotPasswordBaseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MessageViewModel>> {
        const queryParameters: any = {};

        if (requestParameters.domainRootId !== undefined) {
            queryParameters['domainRootId'] = requestParameters.domainRootId;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.gender !== undefined) {
            queryParameters['gender'] = requestParameters.gender;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.phoneDistrictNum !== undefined) {
            queryParameters['phoneDistrictNum'] = requestParameters.phoneDistrictNum;
        }

        if (requestParameters.phoneNumber !== undefined) {
            queryParameters['phoneNumber'] = requestParameters.phoneNumber;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/ForgotPasswordBase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageViewModelFromJSON(jsonValue));
    }

    /**
     */
    async customerForgotPasswordBase(requestParameters: CustomerForgotPasswordBaseRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MessageViewModel> {
        const response = await this.customerForgotPasswordBaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetCartItemsRaw(requestParameters: CustomerGetCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FilterResultOfCartItemDetailGroup>> {
        if (requestParameters.suid === null || requestParameters.suid === undefined) {
            throw new runtime.RequiredError('suid','Required parameter requestParameters.suid was null or undefined when calling customerGetCartItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.suid !== undefined) {
            queryParameters['suid'] = requestParameters.suid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetCartItems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilterResultOfCartItemDetailGroupFromJSON(jsonValue));
    }

    /**
     */
    async customerGetCartItems(requestParameters: CustomerGetCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FilterResultOfCartItemDetailGroup> {
        const response = await this.customerGetCartItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetCategoriesRaw(requestParameters: CustomerGetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<CatGroup>>> {
        if (requestParameters.typeCode === null || requestParameters.typeCode === undefined) {
            throw new runtime.RequiredError('typeCode','Required parameter requestParameters.typeCode was null or undefined when calling customerGetCategories.');
        }

        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling customerGetCategories.');
        }

        const queryParameters: any = {};

        if (requestParameters.typeCode !== undefined) {
            queryParameters['typeCode'] = requestParameters.typeCode;
        }

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatGroupFromJSON));
    }

    /**
     */
    async customerGetCategories(requestParameters: CustomerGetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<CatGroup>> {
        const response = await this.customerGetCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetContactsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Contact>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetContacts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContactFromJSON));
    }

    /**
     */
    async customerGetContacts(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Contact>> {
        const response = await this.customerGetContactsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetContactsPagedRaw(requestParameters: CustomerGetContactsPagedRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FilterResultOfContact>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling customerGetContactsPaged.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.catId) {
            queryParameters['catId'] = requestParameters.catId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetContactsPaged`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilterResultOfContactFromJSON(jsonValue));
    }

    /**
     */
    async customerGetContactsPaged(requestParameters: CustomerGetContactsPagedRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FilterResultOfContact> {
        const response = await this.customerGetContactsPagedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetLocalCartItemsRaw(requestParameters: CustomerGetLocalCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FilterResultOfCartItemDetailGroup>> {
        if (requestParameters.cartItems === null || requestParameters.cartItems === undefined) {
            throw new runtime.RequiredError('cartItems','Required parameter requestParameters.cartItems was null or undefined when calling customerGetLocalCartItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Customer/GetLocalCartItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.cartItems.map(CartRecordToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilterResultOfCartItemDetailGroupFromJSON(jsonValue));
    }

    /**
     */
    async customerGetLocalCartItems(requestParameters: CustomerGetLocalCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FilterResultOfCartItemDetailGroup> {
        const response = await this.customerGetLocalCartItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetOrderDetailRaw(requestParameters: CustomerGetOrderDetailRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OrderDetailViewModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customerGetOrderDetail.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetOrderDetail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDetailViewModelFromJSON(jsonValue));
    }

    /**
     */
    async customerGetOrderDetail(requestParameters: CustomerGetOrderDetailRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OrderDetailViewModel> {
        const response = await this.customerGetOrderDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetOrderListRaw(requestParameters: CustomerGetOrderListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FilterResultOfOrderDetail>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling customerGetOrderList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetOrderList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilterResultOfOrderDetailFromJSON(jsonValue));
    }

    /**
     */
    async customerGetOrderList(requestParameters: CustomerGetOrderListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FilterResultOfOrderDetail> {
        const response = await this.customerGetOrderListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetOrdersRaw(requestParameters: CustomerGetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<OrderDetail>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customerGetOrders.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetOrders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderDetailFromJSON));
    }

    /**
     */
    async customerGetOrders(requestParameters: CustomerGetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<OrderDetail>> {
        const response = await this.customerGetOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetPickupContactByIdRaw(requestParameters: CustomerGetPickupContactByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Contact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customerGetPickupContactById.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetPickupContactById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     */
    async customerGetPickupContactById(requestParameters: CustomerGetPickupContactByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Contact> {
        const response = await this.customerGetPickupContactByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetPickupLlocationsRaw(requestParameters: CustomerGetPickupLlocationsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Contact>>> {
        if (requestParameters.catId === null || requestParameters.catId === undefined) {
            throw new runtime.RequiredError('catId','Required parameter requestParameters.catId was null or undefined when calling customerGetPickupLlocations.');
        }

        const queryParameters: any = {};

        if (requestParameters.catId !== undefined) {
            queryParameters['catId'] = requestParameters.catId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetPickupLlocations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContactFromJSON));
    }

    /**
     */
    async customerGetPickupLlocations(requestParameters: CustomerGetPickupLlocationsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Contact>> {
        const response = await this.customerGetPickupLlocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetPostCatLabelsRaw(requestParameters: CustomerGetPostCatLabelsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling customerGetPostCatLabels.');
        }

        const queryParameters: any = {};

        if (requestParameters.postId !== undefined) {
            queryParameters['postId'] = requestParameters.postId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetPostCatLabels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async customerGetPostCatLabels(requestParameters: CustomerGetPostCatLabelsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Blob> {
        const response = await this.customerGetPostCatLabelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetPostCatsRaw(requestParameters: CustomerGetPostCatsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling customerGetPostCats.');
        }

        const queryParameters: any = {};

        if (requestParameters.postId !== undefined) {
            queryParameters['postId'] = requestParameters.postId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetPostCats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async customerGetPostCats(requestParameters: CustomerGetPostCatsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Blob> {
        const response = await this.customerGetPostCatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetPricesRaw(requestParameters: CustomerGetPricesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<PriceInfo>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customerGetPrices.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetPrices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PriceInfoFromJSON));
    }

    /**
     */
    async customerGetPrices(requestParameters: CustomerGetPricesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<PriceInfo>> {
        const response = await this.customerGetPricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetProfileRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfUserInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetProfile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfUserInfoFromJSON(jsonValue));
    }

    /**
     */
    async customerGetProfile(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfUserInfo> {
        const response = await this.customerGetProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async customerGetQARaw(requestParameters: CustomerGetQARequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FilterResultOfQa>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling customerGetQA.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling customerGetQA.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling customerGetQA.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/GetQA`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilterResultOfQaFromJSON(jsonValue));
    }

    /**
     */
    async customerGetQA(requestParameters: CustomerGetQARequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FilterResultOfQa> {
        const response = await this.customerGetQARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerLoginRaw(requestParameters: CustomerLoginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfUserInfo>> {
        if (requestParameters.loginInfo === null || requestParameters.loginInfo === undefined) {
            throw new runtime.RequiredError('loginInfo','Required parameter requestParameters.loginInfo was null or undefined when calling customerLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Customer/Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginInfoToJSON(requestParameters.loginInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfUserInfoFromJSON(jsonValue));
    }

    /**
     */
    async customerLogin(requestParameters: CustomerLoginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfUserInfo> {
        const response = await this.customerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerLogoutRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/Logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async customerLogout(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.customerLogoutRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async customerPingRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Customer/Ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async customerPing(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<object> {
        const response = await this.customerPingRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async customerRegisterRaw(requestParameters: CustomerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfUserInfo>> {
        if (requestParameters.register === null || requestParameters.register === undefined) {
            throw new runtime.RequiredError('register','Required parameter requestParameters.register was null or undefined when calling customerRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Customer/Register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterToJSON(requestParameters.register),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfUserInfoFromJSON(jsonValue));
    }

    /**
     */
    async customerRegister(requestParameters: CustomerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfUserInfo> {
        const response = await this.customerRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerRemoveContactRaw(requestParameters: CustomerRemoveContactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling customerRemoveContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Customer/RemoveContact`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contactId as any,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async customerRemoveContact(requestParameters: CustomerRemoveContactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.customerRemoveContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerRemoveFromCartRaw(requestParameters: CustomerRemoveFromCartRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError('ids','Required parameter requestParameters.ids was null or undefined when calling customerRemoveFromCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Customer/RemoveFromCart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.ids,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async customerRemoveFromCart(requestParameters: CustomerRemoveFromCartRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<boolean> {
        const response = await this.customerRemoveFromCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerUpdateCartItemRaw(requestParameters: CustomerUpdateCartItemRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetOfCartRecord>> {
        if (requestParameters.item === null || requestParameters.item === undefined) {
            throw new runtime.RequiredError('item','Required parameter requestParameters.item was null or undefined when calling customerUpdateCartItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Customer/UpdateCartItem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartRecordToJSON(requestParameters.item),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetOfCartRecordFromJSON(jsonValue));
    }

    /**
     */
    async customerUpdateCartItem(requestParameters: CustomerUpdateCartItemRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetOfCartRecord> {
        const response = await this.customerUpdateCartItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
