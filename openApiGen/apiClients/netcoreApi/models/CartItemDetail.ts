/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CategoryPair,
    CategoryPairFromJSON,
    CategoryPairFromJSONTyped,
    CategoryPairToJSON,
} from './CategoryPair';
import {
    PostRecord,
    PostRecordFromJSON,
    PostRecordFromJSONTyped,
    PostRecordToJSON,
} from './PostRecord';

/**
 * 
 * @export
 * @interface CartItemDetail
 */
export interface CartItemDetail {
    /**
     * 
     * @type {number}
     * @memberof CartItemDetail
     */
    postSnapShotId: number;
    /**
     * 
     * @type {boolean}
     * @memberof CartItemDetail
     */
    valid: boolean;
    /**
     * 
     * @type {string}
     * @memberof CartItemDetail
     */
    postId?: string;
    /**
     * 
     * @type {string}
     * @memberof CartItemDetail
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof CartItemDetail
     */
    price: number;
    /**
     * 
     * @type {Array<CategoryPair>}
     * @memberof CartItemDetail
     */
    propCats?: Array<CategoryPair>;
    /**
     * 
     * @type {PostRecord}
     * @memberof CartItemDetail
     */
    post?: PostRecord;
    /**
     * 
     * @type {number}
     * @memberof CartItemDetail
     */
    subTotal: number;
    /**
     * 
     * @type {number}
     * @memberof CartItemDetail
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof CartItemDetail
     */
    priceId: number;
    /**
     * 
     * @type {number}
     * @memberof CartItemDetail
     */
    quant: number;
}

export function CartItemDetailFromJSON(json: any): CartItemDetail {
    return CartItemDetailFromJSONTyped(json, false);
}

export function CartItemDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): CartItemDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'postSnapShotId': json['postSnapShotId'],
        'valid': json['valid'],
        'postId': !exists(json, 'postId') ? undefined : json['postId'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'price': json['price'],
        'propCats': !exists(json, 'propCats') ? undefined : ((json['propCats'] as Array<any>).map(CategoryPairFromJSON)),
        'post': !exists(json, 'post') ? undefined : PostRecordFromJSON(json['post']),
        'subTotal': json['subTotal'],
        'id': json['id'],
        'priceId': json['priceId'],
        'quant': json['quant'],
    };
}

export function CartItemDetailToJSON(value?: CartItemDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'postSnapShotId': value.postSnapShotId,
        'valid': value.valid,
        'postId': value.postId,
        'title': value.title,
        'price': value.price,
        'propCats': value.propCats === undefined ? undefined : ((value.propCats as Array<any>).map(CategoryPairToJSON)),
        'post': PostRecordToJSON(value.post),
        'subTotal': value.subTotal,
        'id': value.id,
        'priceId': value.priceId,
        'quant': value.quant,
    };
}

