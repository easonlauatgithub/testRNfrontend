/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CatLabelGroup,
    CatLabelGroupFromJSON,
    CatLabelGroupFromJSONTyped,
    CatLabelGroupToJSON,
} from './CatLabelGroup';

/**
 * 
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * 
     * @type {number}
     * @memberof Contact
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Contact
     */
    pickContactId: number;
    /**
     * 
     * @type {Contact}
     * @memberof Contact
     */
    pickContact?: Contact;
    /**
     * 
     * @type {number}
     * @memberof Contact
     */
    contactType: number;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Contact
     */
    phoneAreaNo: number;
    /**
     * 
     * @type {number}
     * @memberof Contact
     */
    phone: number;
    /**
     * 
     * @type {number}
     * @memberof Contact
     */
    cityNo: number;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    address?: string;
    /**
     * 
     * @type {CatLabelGroup}
     * @memberof Contact
     */
    phoneDetail?: CatLabelGroup;
    /**
     * 
     * @type {CatLabelGroup}
     * @memberof Contact
     */
    cityDetail?: CatLabelGroup;
}

export function ContactFromJSON(json: any): Contact {
    return ContactFromJSONTyped(json, false);
}

export function ContactFromJSONTyped(json: any, ignoreDiscriminator: boolean): Contact {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'pickContactId': json['pickContactId'],
        'pickContact': !exists(json, 'pickContact') ? undefined : ContactFromJSON(json['pickContact']),
        'contactType': json['contactType'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'phoneAreaNo': json['phoneAreaNo'],
        'phone': json['phone'],
        'cityNo': json['cityNo'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'phoneDetail': !exists(json, 'phoneDetail') ? undefined : CatLabelGroupFromJSON(json['phoneDetail']),
        'cityDetail': !exists(json, 'cityDetail') ? undefined : CatLabelGroupFromJSON(json['cityDetail']),
    };
}

export function ContactToJSON(value?: Contact | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'pickContactId': value.pickContactId,
        'pickContact': ContactToJSON(value.pickContact),
        'contactType': value.contactType,
        'title': value.title,
        'name': value.name,
        'phoneAreaNo': value.phoneAreaNo,
        'phone': value.phone,
        'cityNo': value.cityNo,
        'address': value.address,
        'phoneDetail': CatLabelGroupToJSON(value.phoneDetail),
        'cityDetail': CatLabelGroupToJSON(value.cityDetail),
    };
}

